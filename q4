from cryptography.fernet import fernet
from cryptography.hazmat.primitives.ciphers import Cipher, algorithms, modes
from cryptography.hazmat.primitives.kdf.pbkdf2 import PBKDF2HMAC
from cryptography.hazmat.primitives import hashes, padding
import os
import os.path


BASE=os.path.dirname(os.path.abspath(__file__))

#This code was developed from the base code (aes_cbc_file.py) from Lectorial (5)
#AES encryption
def encrypt_file(input_file_path, output_file_path, password):
    salt = os.urandom(16)
    kdf = PBKDF2HMAC(
        algorithm=hashes.SHA256(), length=32, salt=salt, iterations=100000,
    )
    key = kdf.derive(password.encode())


    iv=os.urandom(16)
    cipher = Cipher(algorithms.AES(key), modes.CBC(iv))
    encryptor = cipher.encryptor()

    #open the plaintext file to be read bytewise
    with open(input_file_path, 'rb') as f:
        plaintext = f.read()

    padder = padding.PKCS7(algorithms.AES.block_size).padder()
    padded_plaintext = padder.update(plaintext) + padder.finalize()


    ciphertext = encryptor.update(padded_plaintext) + encryptor.finalize()
    